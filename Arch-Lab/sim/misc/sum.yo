                            | # Part A: sum.ys: Iteratively sum linked list elements
                            | 
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp	# Set up stack pointer
0x00a: 804800000000000000   | 	call main		# Execute main program
0x013: 00                   | 	halt			# Terminate program
                            | 
                            | # linked list
0x018:                      | 	.align 8
0x018:                      | ls:
0x018:                      | 	ele1:
0x018: 0a00000000000000     | 		.quad 0x00a
0x020: 2800000000000000     | 		.quad ele2
0x028:                      | 	ele2:
0x028: b000000000000000     | 		.quad 0x0b0
0x030: 3800000000000000     | 		.quad ele3
0x038:                      | 	ele3:
0x038: 000c000000000000     | 		.quad 0xc00
0x040: 0000000000000000     | 		.quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq ls, %rdi
0x052: 805c00000000000000   | 	call sum_list		# sum_list(ls)
0x05b: 90                   | 	ret
                            | 
                            | # long sum_list(list_ptr ls)
                            | # ls in %rdi
0x05c:                      | sum_list:
0x05c: 6300                 | 	xorq %rax, %rax		# val = 0
0x05e: 707d00000000000000   | 	jmp test		# Goto test
0x067:                      | loop:
0x067: 50870000000000000000 | 	mrmovq (%rdi), %r8	# Get ls->val
0x071: 6080                 | 	addq %r8, %rax		# val += ls->val
0x073: 50770800000000000000 | 	mrmovq 8(%rdi), %rdi	# ls = ls->val
0x07d:                      | test:
0x07d: 6277                 | 	andq %rdi, %rdi		# Set conditional codes
0x07f: 746700000000000000   | 	jne loop		# Stop when ls is null
0x088: 90                   | 	ret
                            | 
                            | # Stack here
0x200:                      | 	.pos 0x200
0x200:                      | stack:
                            | 
